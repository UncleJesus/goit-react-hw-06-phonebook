{"version":3,"sources":["ContactForm/ContactForm.module.css","Contacts/Contacts.module.css","redux/contacts/contactsActions.js","Contacts/Contacts.jsx","ContactForm/ContactForm.jsx","FilterContacts/FilterContacts.jsx","App/App.jsx","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","addContacts","createAction","name","number","payload","contact","id","uuidv4","handleDelete","handleFilter","filter","postContacts","Contacts","this","props","toPostContacts","prevProps","prevState","contacts","localStorage","setItem","JSON","stringify","TransitionGroup","component","className","style","list","length","map","CSSTransition","timeout","classNames","item","onClick","onDelete","type","Component","mapDispatchToProps","contactsActions","connect","state","items","toLowerCase","includes","ContactForm","handleChange","e","target","value","setState","handleSubmit","preventDefault","toAddContacts","form","onSubmit","lable","input","onChange","dispatch","toFilter","App","createReducer","action","getItem","parse","find","el","alert","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.59276c1a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__6o1SA\",\"lable\":\"ContactForm_lable__tycPl\",\"form\":\"ContactForm_form__VvPmO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Contacts_item__2pDrd\",\"list\":\"Contacts_list__1kfV7\",\"enter\":\"Contacts_enter__3oEnl\",\"enterActive\":\"Contacts_enterActive__15ROR\",\"exit\":\"Contacts_exit__12O67\",\"exitActive\":\"Contacts_exitActive__2hMR4\"};","import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n// import constants from '../constants.js';\n\nconst addContacts = createAction('contact/add', (name, number) => {\n  return {\n    payload: {\n      contact: {\n        name,\n        id: uuidv4(),\n        number\n      }\n    }\n  }\n})\n\nconst handleDelete = createAction('contact/del')\n\nconst handleFilter = createAction('contact/filter', filter=> ({payload: {filter}}) )\n\nconst postContacts = createAction('contacts/post')\n\nexport default {\n  addContacts,\n  handleDelete,\n  handleFilter,\n  postContacts\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup} from 'react-transition-group';\nimport { connect } from \"react-redux\";\n\nimport contactsActions from '../redux/contacts/contactsActions.js';\n\nimport style from \"./Contacts.module.css\";\n\nclass Contacts extends Component {\n\n  componentDidMount() {\n    \n   this.props.toPostContacts()\n    \n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    return (this.props.contacts ? localStorage.setItem('contacts', JSON.stringify(this.props.contacts)) : [])\n  }\n\n  render() {\n\n    return (<TransitionGroup\n    component=\"ul\"\n    className={style.list}>\n    {this.props.contacts.length ? this.props.contacts.map(contact =>\n      <CSSTransition\n        key={contact.id}\n        timeout={250}\n        classNames={style} >\n        <li className={style.item}\n          key={contact.id}>{contact.name}: {contact.number}\n          <button onClick={() => this.props.onDelete(contact.id)} type='button'>Delete</button> </li></CSSTransition>) : []}\n  </TransitionGroup>)\n  }\n}\n\n\nContacts.propTypes = {\n  contacts:  PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => {\n  const filteredNames = state.contacts.items.filter(contact => contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase()) )\n  return {\n    contacts: filteredNames\n  }\n};\nconst mapDispatchToProps = {\n  onDelete: contactsActions.handleDelete,\n  toPostContacts: contactsActions.postContacts\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../redux/contacts/contactsActions';\n\nimport style from './ContactForm.module.css'\n\n\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.toAddContacts(this.state.name, this.state.number);\n    this.setState({\n      name: '',\n      number: ''\n    })\n   }\n  render() {\n    return ( <form className={style.form} onSubmit={this.handleSubmit}>\n      <label className={style.lable}>\n        Name\n      <input className={style.input} name=\"name\" type=\"text\" value={this.state.name} onChange={this.handleChange} />\n      </label>\n      <label className={style.lable}>\n        Number\n      <input className={style.input} name=\"number\" type=\"phone\" value={this.state.number} onChange={this.handleChange} />\n        <button type=\"submit\">Add contact</button>\n      </label>\n    </form>)\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  // const { name, number } = this.state\n  return {\n    toAddContacts: (name, number) => dispatch(contactsActions.addContacts(name, number)),\n  }\n}\nexport default connect(null, mapDispatchToProps)(ContactForm);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport contactsActions from '../redux/contacts/contactsActions.js';\n\nconst Filter = ({ value, toFilter }) =>  (\n    <div>\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={e => toFilter(e.target.value)} />\n    </div>\n  )\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  toFilter: PropTypes.func,\n}\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter\n})\n\nconst mapDispatchToProps = {\n  toFilter: contactsActions.handleFilter,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)","import React from \"react\";\nimport Contacts from \"../Contacts/Contacts\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport Filter from \"../FilterContacts/FilterContacts\";\n// import Style from \"./App.module.css\";\n\nconst App = function () {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Find contacts by name</h2>\n      <Filter />\n      <Contacts />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport contactsActions from './contactsActions.js';\n\nconst toAddContact = (state, action) => {\n  const doubleName = state.find(el => el.name === action.payload.contact.name);\n    if (doubleName) {\n      alert(`${action.payload.contact.name} is already in contacts`);\n      return\n    }\n  return [...state, action.payload.contact];\n}\n\nconst toFilterContact = (state, action) => state.filter(contact => contact.id !== action.payload);\n\n\n\nconst items = createReducer([], {\n  [contactsActions.postContacts]: (state, action) =>  localStorage.getItem('contacts') ? JSON.parse(localStorage.getItem('contacts')) : state,\n  [contactsActions.addContacts]: toAddContact,\n  [contactsActions.handleDelete]: toFilterContact,\n})\n\n\nconst filter = createReducer('', {\n  [contactsActions.handleFilter]: (state, action) => action.payload.filter\n})\n\n\nexport default combineReducers ({items, filter})\n\n\n","\nimport { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contactsReducer';\n\n \nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  }\n})\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App/App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}